name: CI/CD Pipeline

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run tests
        run: ./gradlew test

  deploy:
    name: Build Docker Image and Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/cgv-clone:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/cgv-clone:${{ github.sha }}

      - name: Deploy to EC2 with Docker Compose
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # 작업 디렉토리 처리 (파일/디렉토리 충돌 방지)
            if [ -f ~/cgv-app ]; then
              echo "Removing...cgv-app"
              rm -f ~/cgv-app
            fi
            
            mkdir -p ~/cgv-app
            cd ~/cgv-app
            
            # .env 파일 생성 (GitHub Secrets에서 주입)
            cat > .env << EOF
            DB_NAME=${{ secrets.DB_NAME }}
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_PORT=${{ secrets.DB_PORT }}
            REDIS_PORT=${{ secrets.REDIS_PORT }}
            REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            PAYMENT_API_SECRET=${{ secrets.PAYMENT_API_SECRET }}
            PAYMENT_STORE_ID=${{ secrets.PAYMENT_STORE_ID }}
            DOCKER_IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/cgv-clone:latest
            EOF
            
            echo ".env file created successfully"

      - name: Copy docker-compose.yml to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "docker-compose.yml"
          target: "~/cgv-app"

      - name: Deploy with Docker Compose
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd ~/cgv-app
            
            # Docker 이미지 Pull
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/cgv-clone:latest
            
            # Docker Compose로 배포
            docker-compose -f docker-compose.yml down
            docker-compose -f docker-compose.yml up -d
            
            # 컨테이너 시작 대기
            echo "Waiting for application to start..."
            sleep 60
            
            # 헬스체크
            for i in {1..10}; do
              HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/actuator/health 2>/dev/null || echo "000")
            
              if [ "$HTTP_STATUS" = "200" ]; then
                echo "Deployment successful!"
                docker-compose -f docker-compose.yml logs --tail=50
                exit 0
              fi
            
              echo "Waiting for health check... ($i/10)"
              sleep 5
            done
            
            # 배포 실패 시
            echo "Deployment failed. Rolling back..."
            docker-compose -f docker-compose.yml logs --tail=100
            docker-compose -f docker-compose.yml down
            exit 1