name: CI/CD Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  ci:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sourceCode
        uses: actions/checkout@v4

      - name: Use JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run tests
        run: ./gradlew test

      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}
          path: build/libs/*.jar
          retention-days: 1

  cd:
    name: CD - Deploy to EC2
    runs-on: ubuntu-latest
    needs: ci
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}
          path: build/libs

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            hxxukii/ceos-cgv-server:latest
            hxxukii/ceos-cgv-server:${{ github.sha }}

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          PAYMENT_API_SECRET: ${{ secrets.PAYMENT_API_SECRET }}
          PAYMENT_STORE_ID: ${{ secrets.PAYMENT_STORE_ID }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: DB_HOST,DB_PORT,DB_NAME,DB_USERNAME,DB_PASSWORD,JWT_SECRET,PAYMENT_API_SECRET,PAYMENT_STORE_ID
          script: |
            cd ~/cgv-clone
            
            cat > .env << EOF
            DB_HOST=${DB_HOST}
            DB_PORT=${DB_PORT}
            DB_NAME=${DB_NAME}
            DB_USERNAME=${DB_USERNAME}
            DB_PASSWORD=${DB_PASSWORD}
            JWT_SECRET=${JWT_SECRET}
            PAYMENT_API_SECRET=${PAYMENT_API_SECRET}
            PAYMENT_STORE_ID=${PAYMENT_STORE_ID}
            EOF
            
            # 배포 스크립트 실행
            chmod +x deploy.sh
            ./deploy.sh

      - name: Health check
        run: |
          sleep 15
          
          for i in {1..10}; do
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.EC2_HOST }}:8080/actuator/health || echo "000")
          
            if [ "$HTTP_CODE" = "200" ]; then
              echo "Deployment succeed"
              exit 0
            fi
          
            echo "Waiting for application... ($i/10)"
            sleep 5
          done
          
          echo "Health check failed"
          exit 1